<!DOCTYPE html>
<html>
  <head>
    <title>Color Doctor Report</title>
    <script src="https://unpkg.com/react@17.0.2/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@17.0.2/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/color-util@2.2.3/dist/color-util.min.js"></script>
    <script src="https://unpkg.com/@mui/material@latest/umd/material-ui.development.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/7.21.3/babel.js"></script>

    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"
    />
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" />

    <style>
      body {
        background-color: #f5f5f5;
      }
      .color-label {
        width: 100%;
        height: 100px;
        border-radius: 4px;
        border-bottom-right-radius: 0;
        border-bottom-left-radius: 0;
        margin-bottom: 20px;
      }
    </style>
  </head>
  <body>
    <div id="root"></div>
    <script type="text/babel">
      const {
        Typography,
        FormControl,
        InputLabel,
        Select,
        MenuItem,
        Container,
        Box,
        Grid,
        Paper,
      } = MaterialUI;

      const colors = [<%- hexColorsStrSeparatedByComma %>];

      // Sorting
      function blendRgbaWithWhite(rgba) {
        const color = colorutil.color(rgba);
        const a = color.rgb.a / 255;
        const r = Math.floor(color.rgb.r * a + 0xff * (1 - a));
        const g = Math.floor(color.rgb.g * a + 0xff * (1 - a));
        const b = Math.floor(color.rgb.b * a + 0xff * (1 - a));
        return '#' + ((r << 16) | (g << 8) | b).toString(16);
      }

      function colorDistance(color1, color2) {
        const x =
          Math.pow(color1[0] - color2[0], 2) +
          Math.pow(color1[1] - color2[1], 2) +
          Math.pow(color1[2] - color2[2], 2);
        return Math.sqrt(x);
      }

      const clusters = [
        { name: 'red', leadColor: [255, 0, 0], colors: [] },
        { name: 'orange', leadColor: [255, 128, 0], colors: [] },
        { name: 'yellow', leadColor: [255, 255, 0], colors: [] },
        { name: 'chartreuse', leadColor: [128, 255, 0], colors: [] },
        { name: 'green', leadColor: [0, 255, 0], colors: [] },
        { name: 'spring green', leadColor: [0, 255, 128], colors: [] },
        { name: 'cyan', leadColor: [0, 255, 255], colors: [] },
        { name: 'azure', leadColor: [0, 127, 255], colors: [] },
        { name: 'blue', leadColor: [0, 0, 255], colors: [] },
        { name: 'violet', leadColor: [127, 0, 255], colors: [] },
        { name: 'magenta', leadColor: [255, 0, 255], colors: [] },
        { name: 'rose', leadColor: [255, 0, 128], colors: [] },
        { name: 'black', leadColor: [0, 0, 0], colors: [] },
        { name: 'grey', leadColor: [235, 235, 235], colors: [] },
        { name: 'white', leadColor: [255, 255, 255], colors: [] },
      ];

      function oneDimensionSorting(colors, dim) {
        return colors
          .sort((colorA, colorB) => {
            if (colorA.hsl[dim] < colorB.hsl[dim]) {
              return -1;
            } else if (colorA.hsl[dim] > colorB.hsl[dim]) {
              return 1;
            } else {
              return 0;
            }
          });
      }

      function sortWithClusters(colorsToSort) {
        const mappedColors = colorsToSort
          .map((color) => {
            const isRgba = color.includes('rgba');
            if (isRgba) {
              return blendRgbaWithWhite(color);
            } else {
              return color;
            }
          })
          .map(colorutil.color);
        
        mappedColors.forEach((color) => {
          let minDistance;
          let minDistanceClusterIndex;
          
          clusters.forEach((cluster, clusterIndex) => {
            const colorRgbArr = [color.rgb.r, color.rgb.g, color.rgb.b];
            const distance = colorDistance(colorRgbArr, cluster.leadColor);
            if (typeof minDistance === 'undefined' || minDistance > distance) {
              minDistance = distance;
              minDistanceClusterIndex = clusterIndex;
            }
          });
          
          clusters[minDistanceClusterIndex].colors.push(color);
        });
        
        clusters.forEach((cluster) => {
          const dim = ['white', 'grey', 'black'].includes(cluster.name) ? 'l' : 's';
          cluster.colors = oneDimensionSorting(cluster.colors, dim)
        });

        return clusters;
      }

      const sortedClusters = sortWithClusters(colors);
      const sortedColors = sortedClusters.reduce((acc, curr) => {
        const colors = curr.colors.map((color) => color.hex);
        return [...acc, ...colors];
      }, []);

      function ColorList() {
        const [selectedOrderMethod, setSelectedOrderMethod] = React.useState("bright");
        const [allColors, setAllColors] = React.useState(colors)

        const onChange = (event) => {
          const value = event.target.value;
          setSelectedOrderMethod(value);
          setAllColors(value === 'bright' ? colors : sortedColors);
        };

        const colorItems = allColors.map((color) => (
          <Grid item xs={4} key={color}>
            <Paper elevation={1}>
              <div class="color-label" style={{backgroundColor: color}}></div>
              <Typography variant="subtitle1" gutterBottom>{color}</Typography>
            </Paper>
          </Grid>
        ));
        return (
          <Container maxWidth="sm">
            <Box sx={{ my: 4 }}>
              <Typography variant="h4" component="h1" gutterBottom>
                Color Doctor Report
              </Typography>

              <FormControl>
                <InputLabel id="demo-simple-select-label">Colors ordering</InputLabel>
                <Select
                  labelId="demo-simple-select-label"
                  id="demo-simple-select"
                  value={selectedOrderMethod}
                  label="Colors ordering"
                  onChange={onChange}
                  gutterBottom
                >
                  <MenuItem value={'bright'}>Brightiest Colors</MenuItem>
                  <MenuItem value={'group'}>Clusted Colors</MenuItem>
                </Select>
              </FormControl>

              <Grid container spacing={2} mt={2}>
                {colorItems}
              </Grid>;
            </Box>
          </Container>
        );
      }

      ReactDOM.render(<ColorList />,
        document.getElementById('root')
      );
    </script>
  </body>
</html>